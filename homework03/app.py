"""–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

from copy import deepcopy

import dash
import networkx as nx
import pandas as pd
import plotly.express as px  # type: ignore
from dash import dash_table, dcc, html # type: ignore
from flask import Flask, render_template

from network import *

# –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —ç—Ç—É —á–∞—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
#orig_df = pd.read_csv("python_300_vac.csv")
#orig_df["tokens"] = orig_df.requirement.apply(preprocess_text)
#kdf = orig_df

# –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏
kdf = pd.read_csv("python_300_vac_tokens.csv")

df = kdf["title"].value_counts().reset_index()[:10]
fig = px.bar(df, x="title", y="count", title="–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏")

# –∏—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
keywords = get_keywords(kdf)

# –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥—Ñ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
keywords_show = deepcopy(keywords)
keywords_show.keywords = keywords_show.keywords.apply(", ".join)


# —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
server = Flask(__name__)


@server.route("/")
def index():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    return render_template("index.html")


# —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
dash_dashboard_app = dash.Dash(
    __name__, server=server, url_base_pathname="/dashboard/", suppress_callback_exceptions=True
)

dash_dashboard_app.layout = html.Div(
    style={"fontFamily": "Segoe UI", "textAlign": "center", "padding": "10px", "backgroundColor": "#f0f8ff"},
    children=[
        html.H2("üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
        html.A("‚Üê –ù–∞–∑–∞–¥", href="/", style={"color": "#28a745", "textDecoration": "none", "fontSize": "1.1em"}),
        dcc.Graph(figure=fig, style={"marginBottom": "10px", "marginTop": "10px"}),
        dash_table.DataTable( # type: ignore
            data=keywords_show.to_dict("records"),
            columns=[{"name": i, "id": i} for i in keywords_show.columns],
            style_cell={"textAlign": "center", "padding": "1px"},
            style_header={"backgroundColor": "#28a745", "color": "white", "fontWeight": "bold"},
            style_table={"width": "100%", "margin": "0 auto"},
        ),
        html.Br(),
    ],
)


# —Å—Ç—Ä–æ–∏–º —Å–≤—è–∑–∏
graph_edges = create_network(keywords)
# —Å–∞–º –≥—Ä–∞—Ñ
G: nx.Graph = nx.Graph()
G.add_edges_from(graph_edges)
# —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
comms, subgr = get_communities(G)
whole_graph = plot_communities(comms, subgr)
# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤ –æ—Ç–¥–µ–ª—å–Ω–æ —Å –Ω–∞–≤—ã–∫–∞–º–∏
vis_data = []
for i, comm in enumerate(comms):
    subgraph = plot_one_community(subgr, comm, i + 1)
    skills_df = frequently_used_skills(comm, keywords)[:10]
    subfig = px.bar(skills_df, x="skill", y="frequency", title="–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –Ω–∞–≤—ã–∫–∏")
    vis_data.append((subgraph, subfig))

# —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –≥—Ä–∞—Ñ–æ–≤
dash_dashboard_app = dash.Dash(
    __name__, server=server, url_base_pathname="/network/", suppress_callback_exceptions=True
)

# —ç—Ç—É —á–∞—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–∏—Å–∞—Ç—å
dash_dashboard_app.layout = html.Div(
    style={"fontFamily": "Segoe UI", "textAlign": "center", "padding": "10px", "backgroundColor": "#f0f8ff"},
    children=[
        html.H2("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"),
        html.A("‚Üê –ù–∞–∑–∞–¥", href="/", style={"color": "#28a745", "textDecoration": "none", "fontSize": "1.1em"}),
        html.H3("üåÄ –ì—Ä–∞—Ñ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π"),
        dcc.Graph(figure=whole_graph, style={"marginBottom": "5px", "marginTop": "5px"}),
        *[
            html.Div(
                [
                    html.H3(f"üåÄ –ì—Ä–∞—Ñ –≤–∞–∫–∞–Ω—Å–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ‚Ññ{n+1}"),
                    dcc.Graph(figure=subgr, style={"marginBottom": "5px", "marginTop": "5px"}),
                    dcc.Graph(figure=skills, style={"marginBottom": "10px", "marginTop": "10px"}),
                ]
            )
            for n, (subgr, skills) in enumerate(vis_data)
        ],
        html.Br(),
    ],
)

# –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    server.run(debug=False)
